// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package netprog.uebung01.a1_2;

public final class GruppenlisteImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void loesche(int)"),
	new java.rmi.server.Operation("java.lang.String toString(int)[]"),
	new java.rmi.server.Operation("void trageEin(int, java.lang.String, java.lang.String, java.lang.String)")
    };
    
    private static final long interfaceHash = 5367722847421550272L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 3628411346883113487L) {
		opnum = 0;
	    } else if (hash == -1277871554222624186L) {
		opnum = 1;
	    } else if (hash == 949364721650526596L) {
		opnum = 2;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	netprog.uebung01.a1_2.GruppenlisteImpl server = (netprog.uebung01.a1_2.GruppenlisteImpl) obj;
	switch (opnum) {
	case 0: // loesche(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.loesche($param_int_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // toString(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String[] $result = server.toString($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // trageEin(int, String, String, String)
	{
	    int $param_int_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    java.lang.String $param_String_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
		$param_String_4 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.trageEin($param_int_1, $param_String_2, $param_String_3, $param_String_4);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
